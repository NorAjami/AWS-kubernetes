# üöÄ ArgoCD!

## üìã Steg 0: Verifiera Prerequisites

```bash
# Kolla nodes
kubectl get nodes

# Kolla kubectl version
kubectl version --client
```
---

## üéØ Steg 1: Install ArgoCD

### 1.1 Skapa ArgoCD Namespace

```bash
kubectl create namespace argocd
```

**F√∂rv√§ntat:**
```
namespace/argocd created
```

---

### 1.2 Installera ArgoCD

```bash
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
```

**Detta installerar:**
- ArgoCD API Server
- Repository Server (ansluter till Git)
- Application Controller (synkar resurser)
- Redis (caching)
- Dex (SSO, optional)
- Web UI

**Output blir L√ÖNG** (massa `created`):
```
customresourcedefinition.apiextensions.k8s.io/applications.argoproj.io created
customresourcedefinition.apiextensions.k8s.io/applicationsets.argoproj.io created
customresourcedefinition.apiextensions.k8s.io/appprojects.argoproj.io created
serviceaccount/argocd-application-controller created
serviceaccount/argocd-applicationset-controller created
...
(massa rader)
...
deployment.apps/argocd-server created
```

**Detta tar ~30 sekunder.**

---

### 1.3 Verifiera Installation

```bash
# Kolla alla pods
kubectl get pods -n argocd
```

**Du kommer se:**
```
NAME                                               READY   STATUS
argocd-application-controller-0                    0/1     ContainerCreating
argocd-applicationset-controller-xxx               0/1     ContainerCreating
argocd-dex-server-xxx                              0/1     ContainerCreating
argocd-notifications-controller-xxx                0/1     ContainerCreating
argocd-redis-xxx                                   0/1     ContainerCreating
argocd-repo-server-xxx                             0/1     ContainerCreating
argocd-server-xxx                                  0/1     ContainerCreating
```

**V√§nta tills alla √§r Running:**

```bash
kubectl wait --for=condition=ready pod --all -n argocd --timeout=300s
```

**Detta tar 2-3 minuter.**

**N√§r det √§r klart:**
```
pod/argocd-application-controller-0 condition met
pod/argocd-applicationset-controller-xxx condition met
...
```

---

# üåê Steg 2: Access ArgoCD Web UI

---

## 2.1 Exponera ArgoCD Server

Vi anv√§nder **LoadBalancer** (som din Todo-app) f√∂r att f√• extern √•tkomst:

```bash
kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
```

**F√∂rv√§ntat:**
```
service/argocd-server patched
```

---

## 2.2 V√§nta p√• Load Balancer

```bash
kubectl get svc argocd-server -n argocd -w
```

**Initialt:**
```
NAME            TYPE           EXTERNAL-IP   PORT(S)
argocd-server   LoadBalancer   <pending>     80:xxxxx/TCP,443:xxxxx/TCP
```

**Efter 2-3 minuter:**
```
NAME            TYPE           EXTERNAL-IP                               PORT(S)
argocd-server   LoadBalancer   abc123-xyz.elb.eu-west-1.amazonaws.com   80:xxxxx/TCP,443:xxxxx/TCP
```

**Tryck Ctrl+C n√§r du ser EXTERNAL-IP!**

---

## 2.3 H√§mta ArgoCD URL

```bash
kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' && echo
```

**Output:** N√•got som `abc123-xyz.elb.eu-west-1.amazonaws.com`

**Kopiera denna URL!** üìã

---

## 2.4 H√§mta Admin Password

```bash
kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d && echo
```

**Output:** En l√•ng str√§ng, typ: `TkX9vR2zQ8yHn4Wp`

**Kopiera detta l√∂senord!** üìã

---

## 2.5 √ñppna ArgoCD UI i webbl√§sare

1. **√ñppna ny flik i webbl√§saren**
2. **Klistra in:** `https://<din-url-fr√•n-steg-2.3>`
   
   **OBS: HTTPS** (inte http!)

**Exempel:**
```
https://abc123-xyz.elb.eu-west-1.amazonaws.com
```

3. **Du f√•r s√§kerhetsvarning** (self-signed certificate)
   - Klicka **"Advanced"** 
   - Klicka **"Proceed to ... (unsafe)"** eller **"Accept the Risk and Continue"**

---

## 2.6 Logga in

**Login-sk√§rm:**
- **Username:** `admin`
- **Password:** [L√∂senordet fr√•n steg 2.4]

**Klicka "SIGN IN"**

---

## üéâ Du ska nu se ArgoCD Dashboard!

**Dashboard visar:**
- "Applications" (tom just nu)
- "+ NEW APP" knapp (v√§nster)
- "Settings" l√§nk (v√§nster)

---

## 2.7 Byt Admin Password (Rekommenderat)

1. Klicka p√• **ikonen med person** (top right)
2. V√§lj **"User Info"**
3. Klicka **"UPDATE PASSWORD"**
4. Fyll i:
   - **Current password:** [Det l√•nga fr√•n steg 2.4]
   - **New password:** V√§lj n√•got enklare att komma ih√•g
   - **Confirm new password:** Samma igen
5. Klicka **"SAVE"**

---

## ‚úÖ Status Check

- ‚úÖ √ñppna ArgoCD UI i webbl√§sare
- ‚úÖ Logga in med admin + l√∂senord
- ‚úÖ Se tom dashboard med "+ NEW APP" knapp

---

# üöÄ Steg 4: Skapa ArgoCD Application f√∂r Todo-App
4.1 √ñppna ArgoCD UI
Du ska redan vara inloggad. Om inte:
https://<din-argocd-url>

## 4.2 Skapa New Application

Klicka "+ NEW APP" (top left)

GENERAL:

Application Name: todo-app
Project Name: default
Sync Policy: Manual (vi testar manuellt f√∂rst)

SOURCE:

Repository URL: https://github.com/NorAjami/AWS-kubernetes
Revision: HEAD (eller main)
Path: todo-app/kubernetes/overlays/eks-dockerhub

DESTINATION:

Cluster URL: https://kubernetes.default.svc (ska vara pre-filled)
Namespace: todo-app

SYNC OPTIONS (optional, men bra):

‚úÖ AUTO-CREATE NAMESPACE (checka denna!)


## 4.3 Skapa Application
Scrolla upp och klicka "CREATE" (top of page)

üéä Nu ska du se:
I Applications-listan:
NAME      SYNC STATUS    HEALTH STATUS
todo-app  OutOfSync      Missing
Klicka p√• "todo-app" application f√∂r att se detaljer!

üëÄ Vad ser du i Application-vyn?
Du ska se ett resource tree med alla dina manifests:

Namespace: todo-app
StorageClass: ebs-sc
StatefulSet: mongodb
Services: mongodb-service, todo-webapp-service, mongo-express-service
Deployments: todo-webapp, mongo-express
ConfigMap: webapp-config
Job: mongodb-init

Status: Alla √§r OutOfSync (√§nnu inte deployed) gula/orange varnings-ikoner

‚úÖ Bekr√§fta:
du ska se:

‚úÖ Application skapad i ArgoCD
‚úÖ Status "OutOfSync"
‚úÖ Resource tree med dina manifests

# üöÄ Steg 5: Sync Application (Deploy!)

Nu deployar vi till ditt cluster!

## 5.1 Starta Sync
I ArgoCD UI:

Klicka "SYNC" button (top right, bl√• knapp)
Sync options visas:

Du ser alla resurser som kommer skapas
Scroll igenom listan


Klicka "SYNCHRONIZE" (l√§ngst ner)


## 5.2 √ñvervaka Deployment
ArgoCD kommer:

‚úÖ Skapa namespace todo-app
‚úÖ Skapa StorageClass ebs-sc
‚úÖ Deploya MongoDB StatefulSet
‚è≥ V√§nta p√• EBS volume provisioning
‚úÖ Starta MongoDB pod
‚úÖ K√∂ra mongodb-init Job (seed database)
‚úÖ Deploya todo-webapp (2 replicas)
‚úÖ Deploya mongo-express
‚úÖ Skapa LoadBalancer services

Du ser real-time progress i resource tree:

Gula ikoner ‚Üí Gr√∂na checkmarks ‚úÖ
"Progressing" ‚Üí "Healthy"
"Syncing" ‚Üí "Synced"


‚è±Ô∏è Hur l√•ng tid tar det?
Timeline:

0-30s: Namespace, StorageClass, ConfigMap skapas
30s-2min: MongoDB StatefulSet + EBS volume
2-3min: MongoDB-init Job completes
3-4min: WebApp pods startar
4-6min: LoadBalancers provisions

TOTAL: ~5-6 minuter

üëÄ Vad ska du titta efter?
Resource tree uppdateras i real-time:
Initialt:
StorageClass: Synced ‚úÖ, Healthy ‚úÖ
StatefulSet: Syncing üîÑ, Progressing ‚è≥
PVC: Syncing üîÑ, Pending ‚è≥
Efter ~2 min:
StatefulSet: Synced ‚úÖ, Healthy ‚úÖ
PVC: Synced ‚úÖ, Bound ‚úÖ
Pods: Running ‚úÖ
Efter ~5 min:
Services: Synced ‚úÖ, Healthy ‚úÖ (LoadBalancers med EXTERNAL-IP)

Din Todo-app √§r deployed via GitOps!

Allt gr√∂nt = Perfekt deployment! ‚úÖ


---

## üåê Steg 6: Verifiera & Accessa Applikationen

### 6.1 Verifiera i Cluster

**√ñppna terminal:**

```bash
# Kolla alla resurser
kubectl get all -n todo-app
```

**F√∂rv√§ntat:**
```
NAME                              READY   STATUS      RESTARTS   AGE
pod/mongodb-0                     1/1     Running     0          5m
pod/mongodb-init-xxx              0/1     Completed   0          5m
pod/mongo-express-xxx             1/1     Running     0          4m
pod/todo-webapp-xxx               1/1     Running     0          4m
pod/todo-webapp-yyy               1/1     Running     0          4m

NAME                            TYPE           EXTERNAL-IP
service/mongodb-service         ClusterIP      None
service/mongo-express-service   LoadBalancer   abc.elb.eu-west-1.amazonaws.com
service/todo-webapp-service     LoadBalancer   xyz.elb.eu-west-1.amazonaws.com
```

---

### 6.2 H√§mta Application URLs

```bash
# Todo App URL
kubectl get svc todo-webapp-service -n todo-app -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' && echo

# Mongo Express URL
kubectl get svc mongo-express-service -n todo-app -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' && echo
```

**Kopiera b√•da URLerna!** üìã

---

### 6.3 √ñppna i webbl√§sare

**Todo App:**
```
http://<todo-webapp-url>
```

**Mongo Express:**
```
http://<mongo-express-url>
```

**OBS: HTTP** (inte https denna g√•ng!)

---

## ‚úÖ Fungerar applikationen?

**Testa:**
1. ‚úÖ Todo-app visar UI med 2 sample todos?
2. ‚úÖ Kan du l√§gga till ny todo?
3. ‚úÖ Mongo Express visar databasen?

---

# üéØ Steg 7: GitOps Magic - Testa Auto-Sync!

Nu kommer det coola! Vi √§ndrar n√•got i Git och ArgoCD deployar automatiskt!

---

## 7.1 Aktivera Auto-Sync

**I ArgoCD UI:**

1. Klicka p√• **"todo-app"** application (om du inte redan √§r d√§r)
2. Klicka **"APP DETAILS"** (top left, bredvid app-namnet)
3. Klicka **"ENABLE AUTO-SYNC"**
4. En dialog √∂ppnas - checka dessa options:
   - ‚úÖ **PRUNE RESOURCES** (ta bort resurser som inte finns i Git)
   - ‚úÖ **SELF HEAL** (√•terst√§ll manuella √§ndringar)
5. Klicka **"OK"**

**Nu syncar ArgoCD automatiskt var 3:e minut!** üîÑ

---

## 7.2 Testa GitOps - √Ñndra Replicas fr√•n 3 ‚Üí 4

**Vi testar genom att √§ndra antal webapp-replicas fr√•n 3 ‚Üí 4!**

### Via GitHub Web Interface:

1. **G√• till din GitHub:** `https://github.com/DITT-NAMN/AWS-kubernetes`

2. **Navigera till:** `todo-app/kubernetes/overlays/eks-dockerhub/kustomization.yaml`

3. **Klicka "Edit" (penna-ikonen)** uppe till h√∂ger

4. **Scrolla ner till patches-sektionen** och l√§gg till denna patch l√§ngst ner (efter LoadBalancer patches):

```yaml
  - target:
      kind: Deployment
      name: todo-webapp
    patch: |-
      - op: replace
        path: /spec/replicas
        value: 4
```

5. **Scrolla ner ‚Üí "Commit changes"**
6. **Commit message:** `Scale webapp to 4 replicas for GitOps demo`
7. **Klicka "Commit changes"**

---

## 7.3 √ñvervaka ArgoCD Auto-Sync

**Efter du committat:**

**I ArgoCD UI:**

1. **V√§nta upp till ~3 minuter** (ArgoCD polling interval)
   
   **ELLER klicka "REFRESH" button** (cirkel-pil icon, top bar) f√∂r instant check

2. **Status √§ndras:**
   - `Synced` ‚Üí `OutOfSync` (ArgoCD detekterar Git-√§ndring)

3. **Auto-sync triggas automatiskt:**
   - Status: `OutOfSync` ‚Üí `Syncing` 
   - Du ser deployment uppdateras i resource tree

4. **Efter ~30 sekunder:**
   - Status: `Syncing` ‚Üí `Synced` ‚úÖ
   - Health: `Healthy` ‚úÖ

5. **I resource tree:**
   - Klicka p√• **"todo-webapp"** Deployment
   - Du ser att replicas nu √§r 4
   - En ny pod skapas

---

## 7.4 Verifiera 4 Pods i Cluster

**√ñppna terminal:**

```bash
kubectl get pods -n todo-app -l app=todo-webapp
```

**F√∂rv√§ntat:**
```
NAME                           READY   STATUS    RESTARTS   AGE
todo-webapp-xxx                1/1     Running   0          25m
todo-webapp-yyy                1/1     Running   0          25m
todo-webapp-zzz                1/1     Running   0          10m
todo-webapp-aaa                1/1     Running   0          1m   ‚Üê NY POD!
```

**4 pods ist√§llet f√∂r 3!** üéâ

---

## üéä Detta demonstrerar GitOps Workflow:

```
1. Developer ‚Üí Git commit (du √§ndrade kustomization.yaml)
           ‚Üì
2. ArgoCD polls Git (var 3:e minut eller manual refresh)
           ‚Üì
3. ArgoCD detekterar change (OutOfSync status)
           ‚Üì
4. Auto-sync triggas (Syncing...)
           ‚Üì
5. Kubernetes uppdateras (ny pod skapas)
           ‚Üì
6. Status: Synced ‚úÖ (Git = Cluster)
```

**Git √§r k√§llan till sanning! Ingen kubectl apply beh√∂vdes!** ‚ú®

---

## üîÑ Steg 8: Testa Self-Heal

**Self-heal = ArgoCD √•terst√§ller manuella √§ndringar automatiskt!**

### 8.1 G√∂r Manuell √Ñndring i Cluster

L√•t oss manuellt scale deployment till 6 replicas (utanf√∂r Git):

```bash
kubectl scale deployment todo-webapp -n todo-app --replicas=6
```

**Verifiera:**
```bash
kubectl get pods -n todo-app -l app=todo-webapp
```

**Du ser 6 pods!** (2 extra pods skapade manuellt)

---

### 8.2 V√§nta p√• Self-Heal (Drift Detection)

**I ArgoCD UI:**

1. **Status √§ndras omedelbart:**
   - `Synced` ‚Üí `OutOfSync` 
   - ArgoCD detekterar att cluster state != Git state (drift!)

2. **Efter ~30 sekunder:**
   - Self-heal kickar in automatiskt
   - Status: `OutOfSync` ‚Üí `Syncing`
   - ArgoCD syncar tillbaka till desired state (4 replicas fr√•n Git)

3. **Efter ~1 minut:**
   - Status: `Syncing` ‚Üí `Synced` ‚úÖ
   - Cluster √•terst√§lld till Git state

---

### 8.3 Verifiera Rollback till 4 Replicas

```bash
kubectl get pods -n todo-app -l app=todo-webapp
```

**Under self-heal:**
```
NAME                           READY   STATUS        RESTARTS   AGE
todo-webapp-xxx                1/1     Running       0          30m
todo-webapp-yyy                1/1     Running       0          30m
todo-webapp-zzz                1/1     Running       0          15m
todo-webapp-aaa                1/1     Running       0          5m
todo-webapp-bbb                1/1     Terminating   0          1m  ‚Üê Tas bort
todo-webapp-ccc                1/1     Terminating   0          1m  ‚Üê Tas bort
```

**Efter 1 minut:**
```
NAME                           READY   STATUS    RESTARTS   AGE
todo-webapp-xxx                1/1     Running   0          30m
todo-webapp-yyy                1/1     Running   0          30m
todo-webapp-zzz                1/1     Running   0          15m
todo-webapp-aaa                1/1     Running   0          5m
```

**Tillbaka till 4 replicas!** üîÑ

---

## üéØ Vad Self-Heal demonstrerar:

- ‚úÖ **Drift Detection:** ArgoCD uppt√§cker manuella √§ndringar
- ‚úÖ **Automatic Reconciliation:** √Öterst√§ller till Git state
- ‚úÖ **Git as Source of Truth:** Cluster m√•ste matcha Git
- ‚úÖ **No Manual Intervention:** Inget manuellt arbete beh√∂vs

**Detta √§r k√§rnan i GitOps: Git styr allt!** üõ°Ô∏è

---
